{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dfc7db45-eb61-4123-8af7-9d079579e78b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:Loading datasets...\n",
      "INFO:root:Preprocessing data...\n",
      "C:\\Users\\MSU-SN-012\\AppData\\Local\\Temp\\ipykernel_17776\\69298291.py:50: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  data.fillna(0, inplace=True)\n",
      "INFO:root:Calculating 'xwOBAcon'...\n",
      "INFO:root:Calculating 'delta_run_exp'...\n",
      "INFO:root:Engineering features...\n",
      "INFO:root:Creating interaction terms...\n",
      "INFO:root:Training the model...\n",
      "INFO:root:Best Random Forest Parameters: {'max_depth': 10, 'min_samples_split': 2, 'n_estimators': 200}\n",
      "INFO:root:Random Forest R^2: 0.947\n",
      "INFO:root:Random Forest RMSE: 0.015\n",
      "INFO:root:Stuff+ scores saved to: Outputs\\stuff_plus_scores.csv\n",
      "INFO:root:Calculating pitch arsenal averages...\n",
      "INFO:root:Pitch Arsenal Averages saved to: Outputs\\pitch_arsenal_averages.csv\n",
      "INFO:root:Creating visualizations...\n",
      "2024-12-05 11:25:36.812 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\MSU-SN-012\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-12-05 11:25:36.812 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import logging\n",
    "\n",
    "# Initialize logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "\n",
    "# Define file paths\n",
    "xwOBAcon_path = 'xwOBAcon.csv'  # Replace with actual path\n",
    "run_values_path = 'run_values.csv'  # Replace with actual path\n",
    "trackman_path = 'final_advanced_metrics.csv'  # Replace with actual path\n",
    "roster_path = 'roster.csv'  # Replace with actual path\n",
    "\n",
    "# Output directories\n",
    "output_folder = 'Outputs'\n",
    "os.makedirs(output_folder, exist_ok=True)\n",
    "\n",
    "# Load datasets\n",
    "logging.info(\"Loading datasets...\")\n",
    "trackman_data = pd.read_csv(trackman_path, low_memory=False)\n",
    "xwOBAcon_data = pd.read_csv(xwOBAcon_path)\n",
    "run_values_data = pd.read_csv(run_values_path)\n",
    "roster_data = pd.read_csv(roster_path)\n",
    "\n",
    "# Step 1: Data Preprocessing\n",
    "logging.info(\"Preprocessing data...\")\n",
    "xwOBAcon_data['launch_angle'] = xwOBAcon_data['launch_angle'].round()\n",
    "xwOBAcon_data['launch_speed'] = xwOBAcon_data['launch_speed'].round()\n",
    "trackman_data['Angle'] = trackman_data['Angle'].round()\n",
    "trackman_data['ExitSpeed'] = trackman_data['ExitSpeed'].round()\n",
    "\n",
    "# Merge datasets\n",
    "data = trackman_data.merge(\n",
    "    xwOBAcon_data, left_on=['Angle', 'ExitSpeed'], right_on=['launch_angle', 'launch_speed'], how='left'\n",
    ").merge(\n",
    "    run_values_data, left_on='TaggedHitType', right_on='event', how='left'\n",
    ")\n",
    "\n",
    "# Filter for pitchers in the roster\n",
    "data = data[data['Pitcher'].isin(roster_data['Pitcher'])]\n",
    "\n",
    "# Fill missing values uniformly\n",
    "data.fillna(0, inplace=True)\n",
    "\n",
    "# Step 2: Calculate `xwOBAcon`\n",
    "logging.info(\"Calculating 'xwOBAcon'...\")\n",
    "\n",
    "def calculate_xwOBAcon(row):\n",
    "    if row['ExitSpeed'] > 90 and (row['Angle'] > 15 and row['Angle'] < 35):\n",
    "        return 0.4\n",
    "    elif row['ExitSpeed'] > 80:\n",
    "        return 0.35\n",
    "    elif row['ExitSpeed'] < 70:\n",
    "        return 0.2\n",
    "    return 0.3\n",
    "\n",
    "# Apply the calculation to the entire dataset\n",
    "data['xwOBAcon'] = data.apply(calculate_xwOBAcon, axis=1)\n",
    "\n",
    "# Step 3: Calculate `delta_run_exp`\n",
    "logging.info(\"Calculating 'delta_run_exp'...\")\n",
    "\n",
    "def calculate_delta_run_exp(row):\n",
    "    run_value_dict = {\n",
    "        'Single': 0.15,\n",
    "        'Double': 0.25,\n",
    "        'Triple': 0.45,\n",
    "        'HomeRun': 1.2,\n",
    "        'FlyBall': -0.05,\n",
    "        'GroundBall': -0.1\n",
    "    }\n",
    "\n",
    "    run_value = run_value_dict.get(row['TaggedHitType'], 0)\n",
    "\n",
    "    if row['ExitSpeed'] > 90 and (row['Angle'] > 15 and row['Angle'] < 35):\n",
    "        run_value += 0.2\n",
    "    elif row['ExitSpeed'] > 80:\n",
    "        run_value += 0.1\n",
    "    elif row['ExitSpeed'] < 70:\n",
    "        run_value -= 0.1\n",
    "\n",
    "    return run_value\n",
    "\n",
    "data['delta_run_exp'] = data.apply(calculate_delta_run_exp, axis=1)\n",
    "\n",
    "# Step 4: Feature Engineering\n",
    "logging.info(\"Engineering features...\")\n",
    "data['SpinEfficiency'] = np.sqrt(data['HorzBreak']**2 + data['InducedVertBreak']**2) / data['SpinRate'] * 100\n",
    "data['SpinRate_InducedVertBreak'] = data['SpinRate'] * data['InducedVertBreak']\n",
    "data['RelSpeed_SpinAxis'] = data['RelSpeed'] * data['SpinAxisNormalized']\n",
    "data['ReleaseConsistency'] = data.groupby('Pitcher')[['RelSide', 'RelHeight']].transform('std').mean(axis=1)\n",
    "\n",
    "# **Create Interaction Terms**\n",
    "logging.info(\"Creating interaction terms...\")\n",
    "data['ExitSpeed_Angle'] = data['ExitSpeed'] * data['Angle']  # Interaction between ExitSpeed and Angle\n",
    "data['SpinRate_RelSide'] = data['SpinRate'] * data['RelSide']  # Interaction between SpinRate and RelSide\n",
    "data['SpinEfficiency_InducedVertBreak'] = data['SpinEfficiency'] * data['InducedVertBreak']  # Interaction between SpinEfficiency and InducedVertBreak\n",
    "data['InducedVertBreak_RelHeight'] = data['InducedVertBreak'] * data['RelHeight']  # Interaction between InducedVertBreak and RelHeight\n",
    "data['ExitSpeed_SpinRate'] = data['ExitSpeed'] * data['SpinRate']  # Interaction between ExitSpeed and SpinRate\n",
    "data['HorzBreak_RelSide'] = data['HorzBreak'] * data['RelSide']  # Interaction between HorzBreak and RelSide\n",
    "data['RelSide_SpinEfficiency'] = data['RelSide'] * data['SpinEfficiency']  # Interaction between RelSide and SpinEfficiency\n",
    "\n",
    "# Dependent variable calculation (using xwOBAcon and delta_run_exp)\n",
    "alpha, beta = 0.5, 0.5\n",
    "data['DependentVariable'] = alpha * data['xwOBAcon'].fillna(0) + beta * data['delta_run_exp'].fillna(0)\n",
    "\n",
    "# Step 5: Model Training\n",
    "logging.info(\"Training the model...\")\n",
    "features = ['RelSpeed', 'SpinRate', 'InducedVertBreak', 'HorzBreak', \n",
    "            'RelSide', 'RelHeight', 'SpinAxisNormalized', 'SpinRate_InducedVertBreak', \n",
    "            'RelSpeed_SpinAxis', 'ReleaseConsistency', 'ExitSpeed_Angle', \n",
    "            'SpinRate_RelSide', 'SpinEfficiency_InducedVertBreak', 'InducedVertBreak_RelHeight',\n",
    "            'ExitSpeed_SpinRate', 'HorzBreak_RelSide', 'RelSide_SpinEfficiency']\n",
    "target = 'DependentVariable'\n",
    "\n",
    "X = data[features]\n",
    "y = data[target]\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Random Forest model with hyperparameter tuning\n",
    "rf_model = RandomForestRegressor(random_state=42)\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'max_depth': [10, 20, None],\n",
    "    'min_samples_split': [2, 5]\n",
    "}\n",
    "grid_search = GridSearchCV(rf_model, param_grid, cv=5, scoring='r2', n_jobs=-1)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Best model from grid search\n",
    "best_rf_model = grid_search.best_estimator_\n",
    "logging.info(f\"Best Random Forest Parameters: {grid_search.best_params_}\")\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = best_rf_model.predict(X_test)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "logging.info(f\"Random Forest R^2: {r2:.3f}\")\n",
    "logging.info(f\"Random Forest RMSE: {rmse:.3f}\")\n",
    "\n",
    "# Save Stuff+ scores\n",
    "data['StuffPlus'] = 100 + (best_rf_model.predict(X_scaled) - y.mean()) / y.std() * 15\n",
    "stuff_plus_path = os.path.join(output_folder, 'stuff_plus_scores.csv')\n",
    "\n",
    "# **Round the values in Stuff+ scores**\n",
    "data['StuffPlus'] = data['StuffPlus'].round(2)\n",
    "\n",
    "data.to_csv(stuff_plus_path, index=False)\n",
    "logging.info(f\"Stuff+ scores saved to: {stuff_plus_path}\")\n",
    "\n",
    "# Step 6: Pitch Arsenal Analysis\n",
    "logging.info(\"Calculating pitch arsenal averages...\")\n",
    "pitch_arsenal_averages = data.groupby(['Pitcher', 'TaggedPitchType'])[['StuffPlus'] + features].mean().reset_index()\n",
    "\n",
    "# **Round the values in pitch arsenal averages**\n",
    "pitch_arsenal_averages[['StuffPlus'] + features] = pitch_arsenal_averages[['StuffPlus'] + features].round(2)\n",
    "\n",
    "arsenal_path = os.path.join(output_folder, 'pitch_arsenal_averages.csv')\n",
    "pitch_arsenal_averages.to_csv(arsenal_path, index=False)\n",
    "logging.info(f\"Pitch Arsenal Averages saved to: {arsenal_path}\")\n",
    "\n",
    "# Step 7: Visualizations\n",
    "logging.info(\"Creating visualizations...\")\n",
    "# Feature importance\n",
    "importance_df = pd.DataFrame({\n",
    "    'Feature': features,\n",
    "    'Importance': best_rf_model.feature_importances_\n",
    "}).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "# Save and plot feature importance\n",
    "importance_path = os.path.join(output_folder, 'feature_importance.csv')\n",
    "importance_df.to_csv(importance_path, index=False)\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Importance', y='Feature', data=importance_df)\n",
    "plt.title('Feature Importance for Random Forest')\n",
    "plt.savefig(os.path.join(output_folder, 'feature_importance.png'))\n",
    "plt.close()\n",
    "\n",
    "# Correlation matrix\n",
    "correlation_matrix = data[features + [target]].corr()\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm')\n",
    "plt.title('Correlation Matrix')\n",
    "heatmap_path = os.path.join(output_folder, 'correlation_heatmap.png')\n",
    "plt.savefig(heatmap_path)\n",
    "plt.close()\n",
    "\n",
    "# Save correlation matrix\n",
    "correlation_path = os.path.join(output_folder, 'correlation_matrix.csv')\n",
    "correlation_matrix.to_csv(correlation_path)\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "\n",
    "# Your model loading and prediction functions here\n",
    "# For example, loading a model (assuming you saved it as `best_rf_model.pkl`)\n",
    "import joblib\n",
    "model = joblib.load('best_rf_model.pkl')  # Adjust the path if needed\n",
    "\n",
    "# Set the title of your app\n",
    "st.title('Stuff+ Model Prediction')\n",
    "\n",
    "# Input fields for users to enter values\n",
    "RelSpeed = st.number_input(\"Enter RelSpeed\", min_value=0.0)\n",
    "SpinRate = st.number_input(\"Enter SpinRate\", min_value=0.0)\n",
    "HorzBreak = st.number_input(\"Enter Horizontal Break\", min_value=0.0)\n",
    "InducedVertBreak = st.number_input(\"Enter Induced Vertical Break\", min_value=0.0)\n",
    "# Add more inputs as necessary...\n",
    "\n",
    "# Collect input values into a dataframe (or any format your model expects)\n",
    "inputs = pd.DataFrame({\n",
    "    'RelSpeed': [RelSpeed],\n",
    "    'SpinRate': [SpinRate],\n",
    "    'HorzBreak': [HorzBreak],\n",
    "    'InducedVertBreak': [InducedVertBreak],\n",
    "    # Add more columns as necessary...\n",
    "})\n",
    "\n",
    "# Make prediction when the user submits\n",
    "if st.button(\"Predict\"):\n",
    "    # Assuming your model has a .predict method\n",
    "    prediction = model.predict(inputs)\n",
    "    st.write(f\"The predicted Stuff+ is: {prediction[0]:.2f}\")\n",
    "\n",
    "# You can also add other visualizations and outputs as needed\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "1dc1834a-cb68-4fa2-8e48-dc7aae85c7d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "331acb67-6505-4925-8220-59dcc7956ddd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,

"import: joblib\n",
"model : joblib.load(best_rf_model.pk1)",
# Title of the app
"st.title:('Stuff+ Model Prediction')",

# Collect input from the user using widgets
RelSpeed = st.number_input("Enter RelSpeed", min_value=0.0)
SpinRate = st.number_input("Enter SpinRate", min_value=0.0)
HorzBreak = st.number_input("Enter Horizontal Break", min_value=0.0)
InducedVertBreak = st.number_input("Enter Induced Vertical Break", min_value=0.0)

# Create a dataframe for input
inputs = pd.DataFrame({
    'RelSpeed': [RelSpeed],
    'SpinRate': [SpinRate],
    'HorzBreak': [HorzBreak],
    'InducedVertBreak': [InducedVertBreak],
})

# When the user clicks the "Predict" button
if st.button('Predict Stuff+'):
    # Use the model to predict Stuff+
    prediction = model.predict(inputs)
    st.write(f"The predicted Stuff+ value is: {prediction[0]:.2f}")

 "nbformat_minor": 5
}
